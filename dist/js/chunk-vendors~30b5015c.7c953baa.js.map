{"version":3,"sources":["webpack:///./node_modules/hammerjs/hammer.js"],"names":["window","document","exportName","undefined","assign","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","this","arguments","Object","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","childP","baseP","prototype","create","constructor","_super","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","MOBILE_REGEX","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","createInputInstance","Type","inputClass","PointerEventInput","TouchInput","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","overallVelocity","getVelocity","overallVelocityX","x","overallVelocityY","y","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","direction","last","lastInterval","v","clientX","clientY","p1","p2","props","sqrt","atan2","PI","start","end","evEl","evTarget","evWin","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","isSyntheticEvent","t","dx","dy","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","getTouchActionProps","TouchAction","value","set","cleanTouchActions","actions","hasPanX","hasPanY","touchMap","cssSupports","CSS","supports","compute","update","touchAction","recognizers","recognizer","getTouchAction","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","STATE_FAILED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","Manager","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","handlers","oldCssProps","toggleCssProps","item","add","triggerDomEvent","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","stop","force","stopped","curRecognizer","existing","remove","on","events","off","Tap","Pan","Swipe","Pinch","Rotate","Press","freeGlobal"],"mappings":"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","file":"js/chunk-vendors~30b5015c.7c953baa.js","sourcesContent":["/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n"],"sourceRoot":""}